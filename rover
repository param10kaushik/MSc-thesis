% Rover_Motor_Model_v1.00
%
%
% This function script is designed to be used alongside 
% Rover_Rigid_Body_Model.m and Rover_4WD_State_Feedback_Controller.m
%
% Modelling the behaviour of the actuators in a Lynxmotion 4WD3 Rover for 
% given matrices of voltages, currents and rotational velocities
%
% Inputs: Matrix of Voltages, Currents, Rotational Velocities 
% Outputs: Torques generated, rate of change of current and rotational
% velocity
%
% Change log:-  **v1.00**   2020/04/28  -  Organised and standardised naming conventions       
%
% *************************************************************************

function [torques,idot,Omegadot] = Rover_Motor_Model_v1(V,I,Omega)

% Initialise relevant parameters
b = 0.008;          % Viscous torque [N m]
Jm = 0.005;         % Moment of inertia of motor [kg m^2]
Kt = 0.35;          % Torque constant [N m A^-1]
Ke = 0.35;          % EMF constant [V rad^-1 s^-1]
L = 0.1;            % Inductance of circuit [H]
R = 4;              % Resistance of circuit [ohms]
alpha = -0.133;     % Gradient for efficiency curve [A^-1]
gamma = 0.6;        % Offset for efficiency curve
zeta = 0.002;       % Base friction on wheel

idot = zeros(1,4);      % Initialise rate of change of current matrix
Omegadot = zeros(1,4);  % Initialise rate of change of rotational velocity matrix
eta = zeros(1,4);       % Initialise efficiency matrix
torques = zeros(1,4);   % Initialise torque matrix

for j = 1:4
   
    idot(1,j) = (V(1,j) - (R*I(1,j)) - (Ke*Omega(1,j)))/L;
    Omegadot(1,j) = ((Kt*I(1,j)) - (b*Omega(1,j)) - (zeta*Omega(1,j)))/Jm;
    
    eta(1,j) = (alpha*I(1,j)) + gamma;
    torques(1,j) = Kt * I(1,j) * eta(1,j);
    
end

% Rover_Open_Loop
%
%
% Designed for Rover_Rigid_Body_Model.m and Rover_Motor_Model.m,
%
% Simulation of a 4WD rover using open-loop control
%
% Inputs: Voltage values
% Outputs: Plots of actual current position
%
% Change log:-  
%
%%
clear; close all; clc;

% ----------------------------------------------------------------------
% Initialise variables
x_mod = zeros(12,1); % Current position and velocity variables

I_mod = zeros(1,4);     % Initialise electrical current vector
Omega_mod = zeros(1,4); % Intialise wheel rotational velocity vector

unmatched = zeros(3,1);

simtime = 0;                % Simulation timer, s
maxtime = 10;             % Upper simulation timer limit, s
dt = 0.001;                  % Simulation time segments, s
i = 2;

% ----------------------------------------------------------------------
% Initialise output matrices
Vout(1,:) = zeros(1,4);
time(1) = simtime;

torquesout_mod(1,:) = zeros(1,4);
xout_mod(1,:) = x_mod;
xdotout_mod(1,:) = zeros(12,1);
omegaout_mod(1,:) = zeros(1,4);
omegadotout_mod(1,:) = zeros(1,4);
Iout_mod(1,:) = zeros(1,4);
Idotout_mod(1,:) = zeros(1,4);

% -----------------------------------------------------------------------
%%

for simtime = dt:dt:maxtime
    
V = [12 12 12 12];  % Input voltage values

% =========================================================================
% Run the rover model
    
    % MODEL    
    % Run the motor model
    [torques_mod,Idot_mod,Omegadot_mod] = Rover_Motor_Model_v1(V,I_mod,Omega_mod);
    
    torquesout_mod(i,:) = torques_mod;
    
    % Run model for dynamic/kinematic response of rover system
    [xdot_mod, x_mod] = Rover_Rigid_Body_System_v1(x_mod,torques_mod,unmatched);
 
% =========================================================================
% Establish outputs

    % MODEL Output Matrices
    xout_mod(i,:) = x_mod;
    xdotout_mod(i,:) = xdot_mod;
    omegaout_mod(i,:) = Omega_mod;
    omegadotout_mod(i,:) = Omegadot_mod;
    Iout_mod(i,:) = I_mod;
    Idotout_mod(i,:) = Idot_mod;
    Vout(i,:) = V;
    time(i) = simtime;
    
% -------------------------------------------------------------------------
        i = i + 1;  % Output counter

% =========================================================================
% Establish new current variables
    x_mod = x_mod + xdot_mod*dt;
    I_mod = I_mod + Idot_mod*dt;
    Omega_mod = Omega_mod + Omegadot_mod.*dt;

end


%% Outputs

subplot(4,2,1)
plot(time,xout_mod(:,1))
xlabel('time [s]')
ylabel('surge [m/s]')
subplot(4,2,2)
plot(time,xout_mod(:,2))
xlabel('time [s]')
ylabel('sway [m/s]')
subplot(4,2,3)
plot(time,xout_mod(:,6)*180/pi)
xlabel('time [s]')
ylabel('yaw rate [m/s]')
subplot(4,2,4)
plot(time,xout_mod(:,12)*180/pi)
xlabel('time [s]')
ylabel('psi [m/s]')
subplot(4,4,9)
plot(time,Vout(:,1))
xlabel('time [s]')
ylabel('V1 [V]')
subplot(4,4,10)
plot(time,Vout(:,2))
xlabel('time [s]')
ylabel('V2 [V]')
subplot(4,4,13)
plot(time,Vout(:,3))
xlabel('time [s]')
ylabel('V3 [V]')
subplot(4,4,14)
plot(time,Vout(:,4))
xlabel('time [s]')
ylabel('V4 [V]')
subplot(2,2,4)
plot(xout_mod(:,8),xout_mod(:,7))
xlabel('y_pos [m]')
ylabel('x_pos [m]')

% Adapted from robot_4wd_full_VER2.m

function [xdot, xo] = Rover_Rigid_Body_System_v1(xcur,torques,unmatched,time)

%--------------------%
% Used to keep psi between -180 -> +180
if(xcur(12)>=(pi))
   xcur(12)=xcur(12)-(2*pi);
elseif(xcur(12)<-pi)
   xcur(12)=xcur(12)+(2*pi);
end
%--------------------%

%
fz = unmatched(1);
tx = unmatched(2);
ty = unmatched(3);

%---------------------------------------------------------------------%
% States
u = xcur(1);
v = xcur(2);
w = xcur(3);
p = xcur(4);
q = xcur(5);
r = xcur(6);
x = xcur(7);  
y = xcur(8);
z = xcur(9);
phi = xcur(10);
theta = xcur(11);
psi = xcur(12);
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Setup Cosines and Sines
% Cosines
cphi = cos(phi); ctheta = cos(theta); cpsi = cos(psi);

% Sines
sphi = sin(phi); stheta = sin(theta); spsi = sin(psi);
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Robot Specifications
m = 2.148;          % Mass of robot, kg
wheel_r = 0.0635;   % Radius of Wheel, m
x_area = 0.0316;    % Area presented on the x-axis, m.m
y_area = 0.0448;    % Area presented on the y-axis, m.m
Jx = 0.0140;        % Moment of Inertia about the x-axis, kg.m.m
Jy = 0.0252;        % Moment of Inertia about the y-axis, kg.m.m
Jz = 0.0334;        % Moment of Inertia about the z-axis, kg.m.m
mr = 0.1245;        % Moment Arm

% Constants
g = 9.81;           % Gravity, m/s.s
Cd = 0.89;          % Drag Coefficent
rho= 1.29;          % Air density
W = 21.0719;        % m*g; %Weight
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Input Forces
% Calculated from the torques generated by the wheels. 
force_l1 = (torques(1)/wheel_r);
force_l2 = (torques(2)/wheel_r);
force_r1 = (torques(3)/wheel_r);
force_r2 = (torques(4)/wheel_r);
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Slip
% calculates the slip angle for each wheel
bottom = sqrt((u^2)+(v^2));   % calculate denominator

if bottom == 0,                  % check if 0,
    beta = 0;                    %   if 0 then no movement, no slip
else
    beta = asin(v/bottom);       % else calculate slip
end;

if (abs(beta) > pi)
    beta =  0;
end
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Propulsion Forces
surge = (force_l1+force_l2+force_r1+force_r2)*cos(beta);
sway = (force_l1+force_l2+force_r1+force_r2)*sin(beta);
heave = fz;
roll = tx;
pitch = ty;
yaw = ((force_l1+force_l2)-(force_r1+force_r2))*mr;
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Dampening Terms
% fric_k = 0.35;
% fric_m = 0.44;
% fric_x = 0.22;
% fric_n = 0.18;
% fric_y = 1;
% fric_z = 0.3;

% Friction
Fx_fric = 4.6358*u;     % W*fric_x*u;
Fy_fric = 21.0719*v;    % W*fric_y*v;
Fz_fric = 6.3216*w;     % W*fric_z*w;
K_fric = 0.9182*p;      % W*fric_k*mr*p;
M_fric = 1.1543*q;      % W*fric_m*mr*q;
N_fric = 0.4722*r;      % W*fric_n*mr*r;

% Air Resistance
% x-axis
Fx_ar = 0.0181*u*abs(u); % 0.5*Cd*x_area*rho*u*abs(u);

% Total Dampening
X_damp = Fx_fric+Fx_ar;
Y_damp = Fy_fric;
Z_damp = Fz_fric;
K_damp = K_fric;
M_damp = M_fric;
N_damp = N_fric;
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Gravity Terms
X_grav = W*stheta;
Y_grav = W*sphi*ctheta;
Z_grav = (W*ctheta*cphi)-W;
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Forces and Torques
% Forces
X = surge-X_damp+X_grav;
Y = sway-Y_damp+Y_grav;
Z = heave-Z_damp+Z_grav;

% Torques
K = roll-K_damp;
M = pitch-M_damp;
N = yaw-N_damp;
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Equations of Motion
% Linear Accelerations
udot = (X/m)+(v*r)-(w*q);
vdot = (Y/m)+(w*p)-(u*r);
wdot = (Z/m)+(u*q)-(v*p);

% Rotational Accelerations
pdot = (K-((Jz-Jy)*q*r))/Jx;
qdot = (M-((Jx-Jz)*r*p))/Jy;
rdot = (N-((Jy-Jx)*p*q))/Jz;
 %---------------------------------------------------------------------%
 
%---------------------------------------------------------------------%
% Kinematics
% Linear Kinematics
% xxdot = ((cpsi*ctheta)*u)+(((-spsi*cphi)-(cpsi*stheta*sphi))*v)+(((spsi*sphi)-(cpsi*stheta*cphi))*w); 
%     % xxdot because xdot is the output matrix
% ydot = ((spsi*ctheta)*u)+(((cpsi*cphi)-(spsi*stheta*sphi))*v)+(((-sphi*cpsi)-(spsi*cphi*stheta))*w);
% zdot = ((stheta)*u)+((ctheta*sphi)*v)+((ctheta*cphi)*w);

% From the equations given in the paper, the equations should really be:
%
xxdot = ((cpsi*ctheta)*u)+(((-spsi*cphi)+(cpsi*stheta*sphi))*v)+(((spsi*sphi)+(cpsi*stheta*cphi))*w); 
    % xxdot because xdot is the output matrix
ydot = ((spsi*ctheta)*u)+(((cpsi*cphi)+(spsi*stheta*sphi))*v)+(((-sphi*cpsi)+(spsi*cphi*stheta))*w);
zdot = ((-stheta)*u)+((ctheta*sphi)*v)+((ctheta*cphi)*w);


% Angular Kinematics
% In theory +/-90 degrees for pitch is undefined but matlab tan()
% gives it a figure. Also this situation should not occur.
% ttheta = tan(theta);
% phidot = p+((-sphi*ttheta)*q)+((cphi*ttheta)*r); 
% thetadot = ((cphi)*q)+((sphi)*r);
% psidot = ((-sphi/ctheta)*q)+((cphi/ctheta)*r);

% Same here:
%
ttheta = tan(theta);
phidot = p+((sphi*ttheta)*q)+((cphi*ttheta)*r); 
thetadot = ((cphi)*q)+((-sphi)*r);
psidot = ((sphi/ctheta)*q)+((cphi/ctheta)*r);

%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Assign variables to output
xdot = [udot; vdot; wdot; pdot; qdot; rdot; xxdot; ydot; zdot; phidot; thetadot; psidot];
%---------------------------------------------------------------------%

xo = xcur;
